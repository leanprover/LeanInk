[{"contents":
  "/-|\nCopyright (c) 2014 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthor: Leonardo de Moura, Jeremy Avigad, Haitao Zhang\n|-/\n-- a port of core Lean `init/function.lean`\n\n/-!\n# General operations on functions\n-/\n\nnamespace Function\n\nvariable {α : Sort u₁} {β : Sort u₂} {φ : Sort u₃} {δ : Sort u₄} {ζ : Sort u₁}\n\n@[reducible] def comp_right (f : β → β → β) (g : α → β) : β → α → β :=\nλ b a => f b (g a)\n\n@[reducible] def comp_left (f : β → β → β) (g : α → β) : α → β → β :=\nλ a b => f (g a) b\n\n/-- Given functions `f : β → β → φ` and `g : α → β`, produce a function `α → α → φ` that evaluates\n`g` on each argument, then applies `f` to the results. Can be used, e.g., to transfer a relation\nfrom `β` to `α`. -/\n@[reducible] def on_fun (f : β → β → φ) (g : α → β) : α → α → φ :=\nλ x y => f (g x) (g y)\n\n@[reducible] def combine (f : α → β → φ) (op : φ → δ → ζ) (g : α → β → δ)\n  : α → β → ζ :=\nλ x y => op (f x y) (g x y)\n\n@[reducible] def swap {φ : α → β → Sort u₃} (f : ∀ x y, φ x y) : ∀ y x, φ x y :=\nλ y x => f x y\n\n@[reducible] def app {β : α → Sort u₂} (f : ∀ x, β x) (x : α) : β x :=\nf x\n\ntheorem left_id (f : α → β) : id ∘ f = f := rfl\n\ntheorem right_id (f : α → β) : f ∘ id = f := rfl\n\n@[simp] theorem comp_app (f : β → φ) (g : α → β) (a : α) : (f ∘ g) a = f (g a) := rfl\n\ntheorem comp.assoc (f : φ → δ) (g : β → φ) (h : α → β) : (f ∘ g) ∘ h = f ∘ (g ∘ h) := rfl\n\n@[simp] theorem comp.left_id (f : α → β) : id ∘ f = f := rfl\n\n@[simp] theorem comp.right_id (f : α → β) : f ∘ id = f := rfl\n\ntheorem comp_const_right (f : β → φ) (b : β) : f ∘ (const α b) = const α (f b) := rfl\n\n/-- A function `f : α → β` is called injective if `f x = f y` implies `x = y`. -/\n@[reducible] def injective (f : α → β) : Prop := ∀ {a₁ a₂}, f a₁ = f a₂ → a₁ = a₂\n\ntheorem injective.comp {g : β → φ} {f : α → β} (hg : injective g) (hf : injective f) :\n  injective (g ∘ f) :=\nλ h => hf (hg h)\n\n/-- A function `f : α → β` is calles surjective if every `b : β` is equal to `f a`\nfor some `a : α`. -/\n@[reducible] def surjective (f : α → β) : Prop := ∀ b, ∃ a, f a = b\n\ntheorem surjective.comp {g : β → φ} {f : α → β} (hg : surjective g) (hf : surjective f) :\n  surjective (g ∘ f) :=\nλ (c : φ) => Exists.elim (hg c) (λ b hb => Exists.elim (hf b) (λ a ha =>\n  Exists.intro a (show g (f a) = c from (Eq.trans (congrArg g ha) hb))))\n\n/-- A function is called bijective if it is both injective and surjective. -/\ndef bijective (f : α → β) := injective f ∧ surjective f\n\ntheorem bijective.comp {g : β → φ} {f : α → β} : bijective g → bijective f → bijective (g ∘ f)\n| ⟨h_ginj, h_gsurj⟩, ⟨h_finj, h_fsurj⟩ => ⟨h_ginj.comp h_finj, h_gsurj.comp h_fsurj⟩\n\n/-- `left_inverse g f` means that g is a left inverse to f. That is, `g ∘ f = id`. -/\ndef left_inverse (g : β → α) (f : α → β) : Prop := ∀ x, g (f x) = x\n\n/-- `has_left_inverse f` means that `f` has an unspecified left inverse. -/\ndef has_left_inverse (f : α → β) : Prop := ∃ finv : β → α, left_inverse finv f\n\n/-- `right_inverse g f` means that g is a right inverse to f. That is, `f ∘ g = id`. -/\ndef right_inverse (g : β → α) (f : α → β) : Prop := left_inverse f g\n\n/-- `has_right_inverse f` means that `f` has an unspecified right inverse. -/\ndef has_right_inverse (f : α → β) : Prop := ∃ finv : β → α, right_inverse finv f\n\ntheorem left_inverse.injective {g : β → α} {f : α → β} : left_inverse g f → injective f :=\nλ h a b hf => h a ▸ h b ▸ hf ▸ rfl\n\ntheorem has_left_inverse.injective {f : α → β} : has_left_inverse f → injective f :=\nλ h => Exists.elim h (λ ",
  "_type": "text"},
 {"messages":
  [{"contents": "Warning: unused variable `finv` [linter.unusedVariables]",
    "_type": "message"}],
  "goals": [],
  "contents":
  [{"typeinfo": {"type": "β → α", "name": "finv", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "finv",
    "link": null,
    "docstring": null,
    "_type": "token"}],
  "_type": "sentence"},
 {"contents":
  [{"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "left_inverse finv f", "name": "inv", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "inv",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " => ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "left_inverse finv f", "name": "inv", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "inv",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ".",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "∀ {α : Sort u₁} {β : Sort u₂} {g : β → α} {f : α → β}, left_inverse g f → Function.injective f",
     "name": "injective",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "injective",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ")\n\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "theorem",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "∀ {f : α → β} {g : β → α}, injective f → left_inverse f g → right_inverse f g",
     "name": "right_inverse_of_injective_of_left_inverse",
     "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "right_inverse_of_injective_of_left_inverse",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " {",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "} {",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "}\n    (",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "injective f", "name": "injf", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "injf",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Sort u₁} → {β : Sort u₂} → (α → β) → Prop",
     "name": "injective",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "injective",
    "link": null,
    "docstring":
    "A function `f : α → β` is called injective if `f x = f y` implies `x = y`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") (",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "left_inverse f g", "name": "lfg", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "lfg",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Sort u₂} → {β : Sort u₁} → (β → α) → (α → β) → Prop",
     "name": "left_inverse",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "left_inverse",
    "link": null,
    "docstring":
    "`left_inverse g f` means that g is a left inverse to f. That is, `g ∘ f = id`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") :\n  ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Sort u₂} → {β : Sort u₁} → (β → α) → (α → β) → Prop",
     "name": "right_inverse",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "right_inverse",
    "link": null,
    "docstring":
    "`right_inverse g f` means that g is a right inverse to f. That is, `f ∘ g = id`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " :=\nλ ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α", "name": "x", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "x",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " => ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "injective f", "name": "injf", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "injf",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " $ ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "left_inverse f g", "name": "lfg", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "lfg",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " $ ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α", "name": "x", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "x",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "\n\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "theorem",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "∀ {α : Sort u₁} {β : Sort u₂} {f : α → β} {g : β → α}, right_inverse g f → Function.surjective f",
     "name": "right_inverse.surjective",
     "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "right_inverse.surjective",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " {",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "} {",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "} (",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "right_inverse g f", "name": "h", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "h",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Sort u₁} → {β : Sort u₂} → (β → α) → (α → β) → Prop",
     "name": "right_inverse",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "right_inverse",
    "link": null,
    "docstring":
    "`right_inverse g f` means that g is a right inverse to f. That is, `f ∘ g = id`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Sort u₁} → {β : Sort u₂} → (α → β) → Prop",
     "name": "surjective",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "surjective",
    "link": null,
    "docstring":
    "A function `f : α → β` is calles surjective if every `b : β` is equal to `f a`\nfor some `a : α`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " :=\nλ ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β", "name": "y", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "y",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " => ⟨",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β", "name": "y", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "y",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ", ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "right_inverse g f", "name": "h", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "h",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β", "name": "y", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "y",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "⟩\n\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "theorem",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "∀ {f : α → β}, has_right_inverse f → Function.surjective f",
     "name": "has_right_inverse.surjective",
     "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "has_right_inverse.surjective",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " {",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "} : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Sort u₁} → {β : Sort u₂} → (α → β) → Prop",
     "name": "has_right_inverse",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "has_right_inverse",
    "link": null,
    "docstring":
    "`has_right_inverse f` means that `f` has an unspecified right inverse. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Sort u₁} → {β : Sort u₂} → (α → β) → Prop",
     "name": "surjective",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "surjective",
    "link": null,
    "docstring":
    "A function `f : α → β` is calles surjective if every `b : β` is equal to `f a`\nfor some `a : α`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "\n| ⟨",
    "link": null,
    "docstring": null,
    "_type": "token"}],
  "_type": "text"},
 {"messages":
  [{"contents": "Warning: unused variable `finv` [linter.unusedVariables]",
    "_type": "message"}],
  "goals": [],
  "contents":
  [{"typeinfo": {"type": "β → α", "name": "finv", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "finv",
    "link": null,
    "docstring": null,
    "_type": "token"}],
  "_type": "sentence"},
 {"contents":
  [{"typeinfo": null,
    "semanticType": null,
    "raw": ", ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "right_inverse finv f", "name": "inv", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "inv",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "⟩ => ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "right_inverse finv f", "name": "inv", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "inv",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ".",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "∀ {α : Sort u₁} {β : Sort u₂} {f : α → β} {g : β → α}, right_inverse g f → Function.surjective f",
     "name": "surjective",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "surjective",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "\n\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "theorem",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "∀ {α : Sort u₁} {β : Sort u₂} {f : α → β} {g : β → α}, surjective f → right_inverse f g → left_inverse f g",
     "name": "left_inverse_of_surjective_of_right_inverse",
     "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "left_inverse_of_surjective_of_right_inverse",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " {",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "} {",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "} (",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "surjective f", "name": "surjf", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "surjf",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Sort u₁} → {β : Sort u₂} → (α → β) → Prop",
     "name": "surjective",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "surjective",
    "link": null,
    "docstring":
    "A function `f : α → β` is calles surjective if every `b : β` is equal to `f a`\nfor some `a : α`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ")\n  (",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "right_inverse f g", "name": "rfg", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "rfg",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Sort u₂} → {β : Sort u₁} → (β → α) → (α → β) → Prop",
     "name": "right_inverse",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "right_inverse",
    "link": null,
    "docstring":
    "`right_inverse g f` means that g is a right inverse to f. That is, `f ∘ g = id`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Sort u₂} → {β : Sort u₁} → (β → α) → (α → β) → Prop",
     "name": "left_inverse",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "left_inverse",
    "link": null,
    "docstring":
    "`left_inverse g f` means that g is a left inverse to f. That is, `g ∘ f = id`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " :=\nλ ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β", "name": "y", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "y",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " =>\n  ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "let",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ⟨",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α", "name": "x", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "x",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ", ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "f x = y", "name": "hx", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "hx",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "⟩ := ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "surjective f", "name": "surjf", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "surjf",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β", "name": "y", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "y",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "\n  ",
    "link": null,
    "docstring": null,
    "_type": "token"}],
  "_type": "text"},
 {"messages": [],
  "goals":
  [{"name": "",
    "hypotheses": [],
    "conclusion": "Goals accomplished! 🐙",
    "_type": "goal"}],
  "contents":
  [{"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "by",
    "link": null,
    "docstring":
    "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ",
    "_type": "token"}],
  "_type": "sentence"},
 {"messages": [],
  "goals":
  [{"name": "",
    "hypotheses":
    [{"type": "Sort u₁", "names": ["α"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₂", "names": ["β"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₃", "names": ["φ"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₄", "names": ["δ"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₁", "names": ["ζ"], "body": "", "_type": "hypothesis"},
     {"type": "α → β", "names": ["f"], "body": "", "_type": "hypothesis"},
     {"type": "β → α", "names": ["g"], "body": "", "_type": "hypothesis"},
     {"type": "surjective f",
      "names": ["surjf"],
      "body": "",
      "_type": "hypothesis"},
     {"type": "right_inverse f g",
      "names": ["rfg"],
      "body": "",
      "_type": "hypothesis"},
     {"type": "β", "names": ["y"], "body": "", "_type": "hypothesis"},
     {"type": "α", "names": ["x"], "body": "", "_type": "hypothesis"},
     {"type": "f x = y", "names": ["hx"], "body": "", "_type": "hypothesis"}],
    "conclusion": "f (g y) = y",
    "_type": "goal"}],
  "contents":
  [{"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring":
    "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ",
    "_type": "token"}],
  "_type": "sentence"},
 {"messages": [],
  "goals":
  [{"name": "",
    "hypotheses":
    [{"type": "Sort u₁", "names": ["α"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₂", "names": ["β"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₃", "names": ["φ"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₄", "names": ["δ"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₁", "names": ["ζ"], "body": "", "_type": "hypothesis"},
     {"type": "α → β", "names": ["f"], "body": "", "_type": "hypothesis"},
     {"type": "β → α", "names": ["g"], "body": "", "_type": "hypothesis"},
     {"type": "surjective f",
      "names": ["surjf"],
      "body": "",
      "_type": "hypothesis"},
     {"type": "right_inverse f g",
      "names": ["rfg"],
      "body": "",
      "_type": "hypothesis"},
     {"type": "β", "names": ["y"], "body": "", "_type": "hypothesis"},
     {"type": "α", "names": ["x"], "body": "", "_type": "hypothesis"},
     {"type": "f x = y", "names": ["hx"], "body": "", "_type": "hypothesis"}],
    "conclusion": "f (g y) = y",
    "_type": "goal"}],
  "contents":
  [{"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "rw",
    "link": null,
    "docstring":
    "`rw` is like `rewrite`, but also tries to close the goal by \"cheap\" (reducible) `rfl` afterwards.\n",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " [",
    "link": null,
    "docstring":
    "`rw` is like `rewrite`, but also tries to close the goal by \"cheap\" (reducible) `rfl` afterwards.\n",
    "_type": "token"}],
  "_type": "sentence"},
 {"messages": [],
  "goals":
  [{"name": "",
    "hypotheses":
    [{"type": "Sort u₁", "names": ["α"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₂", "names": ["β"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₃", "names": ["φ"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₄", "names": ["δ"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₁", "names": ["ζ"], "body": "", "_type": "hypothesis"},
     {"type": "α → β", "names": ["f"], "body": "", "_type": "hypothesis"},
     {"type": "β → α", "names": ["g"], "body": "", "_type": "hypothesis"},
     {"type": "surjective f",
      "names": ["surjf"],
      "body": "",
      "_type": "hypothesis"},
     {"type": "right_inverse f g",
      "names": ["rfg"],
      "body": "",
      "_type": "hypothesis"},
     {"type": "β", "names": ["y"], "body": "", "_type": "hypothesis"},
     {"type": "α", "names": ["x"], "body": "", "_type": "hypothesis"},
     {"type": "f x = y", "names": ["hx"], "body": "", "_type": "hypothesis"}],
    "conclusion": "f (g (f x)) = f x",
    "_type": "goal"}],
  "contents":
  [{"typeinfo": null,
    "semanticType": null,
    "raw": "← ",
    "link": null,
    "docstring":
    "`rw` is like `rewrite`, but also tries to close the goal by \"cheap\" (reducible) `rfl` afterwards.\n",
    "_type": "token"},
   {"typeinfo": {"type": "f x = y", "name": "hx", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "hx",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ",",
    "link": null,
    "docstring":
    "`rw` is like `rewrite`, but also tries to close the goal by \"cheap\" (reducible) `rfl` afterwards.\n",
    "_type": "token"}],
  "_type": "sentence"},
 {"messages": [],
  "goals":
  [{"name": "",
    "hypotheses":
    [{"type": "Sort u₁", "names": ["α"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₂", "names": ["β"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₃", "names": ["φ"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₄", "names": ["δ"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₁", "names": ["ζ"], "body": "", "_type": "hypothesis"},
     {"type": "α → β", "names": ["f"], "body": "", "_type": "hypothesis"},
     {"type": "β → α", "names": ["g"], "body": "", "_type": "hypothesis"},
     {"type": "surjective f",
      "names": ["surjf"],
      "body": "",
      "_type": "hypothesis"},
     {"type": "right_inverse f g",
      "names": ["rfg"],
      "body": "",
      "_type": "hypothesis"},
     {"type": "β", "names": ["y"], "body": "", "_type": "hypothesis"},
     {"type": "α", "names": ["x"], "body": "", "_type": "hypothesis"},
     {"type": "f x = y", "names": ["hx"], "body": "", "_type": "hypothesis"}],
    "conclusion": "f (g y) = y",
    "_type": "goal"}],
  "contents":
  [{"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring":
    "`rw` is like `rewrite`, but also tries to close the goal by \"cheap\" (reducible) `rfl` afterwards.\n",
    "_type": "token"}],
  "_type": "sentence"},
 {"messages": [],
  "goals":
  [{"name": "",
    "hypotheses":
    [{"type": "Sort u₁", "names": ["α"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₂", "names": ["β"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₃", "names": ["φ"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₄", "names": ["δ"], "body": "", "_type": "hypothesis"},
     {"type": "Sort u₁", "names": ["ζ"], "body": "", "_type": "hypothesis"},
     {"type": "α → β", "names": ["f"], "body": "", "_type": "hypothesis"},
     {"type": "β → α", "names": ["g"], "body": "", "_type": "hypothesis"},
     {"type": "surjective f",
      "names": ["surjf"],
      "body": "",
      "_type": "hypothesis"},
     {"type": "right_inverse f g",
      "names": ["rfg"],
      "body": "",
      "_type": "hypothesis"},
     {"type": "β", "names": ["y"], "body": "", "_type": "hypothesis"},
     {"type": "α", "names": ["x"], "body": "", "_type": "hypothesis"},
     {"type": "f x = y", "names": ["hx"], "body": "", "_type": "hypothesis"}],
    "conclusion": "f x = f x",
    "_type": "goal"}],
  "contents":
  [{"typeinfo":
    {"type": "right_inverse f g", "name": "rfg", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "rfg",
    "link": null,
    "docstring": null,
    "_type": "token"}],
  "_type": "sentence"},
 {"messages": [],
  "goals":
  [{"name": "",
    "hypotheses": [],
    "conclusion": "Goals accomplished! 🐙",
    "_type": "goal"}],
  "contents":
  [{"typeinfo": null,
    "semanticType": null,
    "raw": "]",
    "link": null,
    "docstring":
    "`rw` is like `rewrite`, but also tries to close the goal by \"cheap\" (reducible) `rfl` afterwards.\n",
    "_type": "token"}],
  "_type": "sentence"},
 {"contents":
  [{"typeinfo": null,
    "semanticType": null,
    "raw": "\n\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "theorem",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "injective id", "name": "injective_id", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "injective_id",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α β : Sort u₁} → (α → β) → Prop",
     "name": "injective",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "injective",
    "link": null,
    "docstring":
    "A function `f : α → β` is called injective if `f x = f y` implies `x = y`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " (@",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Sort u₁} → α → α", "name": "id", "_type": "typeinfo"},
    "semanticType": null,
    "raw": "id",
    "link": null,
    "docstring":
    "The identity function. `id` takes an implicit argument `α : Sort u`\n(a type in any universe), and an argument `a : α`, and returns `a`.\n\nAlthough this may look like a useless function, one application of the identity\nfunction is to explicitly put a type on an expression. If `e` has type `T`,\nand `T'` is definitionally equal to `T`, then `@id T' e` typechecks, and lean\nknows that this expression has type `T'` rather than `T`. This can make a\ndifference for typeclass inference, since `T` and `T'` may have different\ntypeclass instances on them. `show T' from e` is sugar for an `@id T' e`\nexpression.\n",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") := ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "∀ {α : Prop}, α → α", "name": "id", "_type": "typeinfo"},
    "semanticType": null,
    "raw": "id",
    "link": null,
    "docstring":
    "The identity function. `id` takes an implicit argument `α : Sort u`\n(a type in any universe), and an argument `a : α`, and returns `a`.\n\nAlthough this may look like a useless function, one application of the identity\nfunction is to explicitly put a type on an expression. If `e` has type `T`,\nand `T'` is definitionally equal to `T`, then `@id T' e` typechecks, and lean\nknows that this expression has type `T'` rather than `T`. This can make a\ndifference for typeclass inference, since `T` and `T'` may have different\ntypeclass instances on them. `show T' from e` is sugar for an `@id T' e`\nexpression.\n",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "\n\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "theorem",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "∀ {α : Sort u₁}, surjective id",
     "name": "surjective_id",
     "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "surjective_id",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α β : Sort u₁} → (α → β) → Prop",
     "name": "surjective",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "surjective",
    "link": null,
    "docstring":
    "A function `f : α → β` is calles surjective if every `b : β` is equal to `f a`\nfor some `a : α`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " (@",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Sort u₁} → α → α", "name": "id", "_type": "typeinfo"},
    "semanticType": null,
    "raw": "id",
    "link": null,
    "docstring":
    "The identity function. `id` takes an implicit argument `α : Sort u`\n(a type in any universe), and an argument `a : α`, and returns `a`.\n\nAlthough this may look like a useless function, one application of the identity\nfunction is to explicitly put a type on an expression. If `e` has type `T`,\nand `T'` is definitionally equal to `T`, then `@id T' e` typechecks, and lean\nknows that this expression has type `T'` rather than `T`. This can make a\ndifference for typeclass inference, since `T` and `T'` may have different\ntypeclass instances on them. `show T' from e` is sugar for an `@id T' e`\nexpression.\n",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") := λ ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α", "name": "a", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "a",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " => ⟨",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α", "name": "a", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "a",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ", ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "∀ {α : Sort u₁} {a : α}, a = a",
     "name": "rfl",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "rfl",
    "link": null,
    "docstring":
    "`rfl : a = a` is the unique constructor of the equality type. This is the\nsame as `Eq.refl` except that it takes `a` implicitly instead of explicitly.\n\nThis is a more powerful theorem than it may appear at first, because although\nthe statement of the theorem is `a = a`, lean will allow anything that is\ndefinitionally equal to that type. So, for instance, `2 + 2 = 4` is proven in\nlean by `rfl`, because both sides are the same up to definitional equality.\n",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "⟩\n\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "theorem",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "∀ {α : Sort u₁}, bijective id",
     "name": "bijective_id",
     "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "bijective_id",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α β : Sort u₁} → (α → β) → Prop",
     "name": "bijective",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "bijective",
    "link": null,
    "docstring":
    "A function is called bijective if it is both injective and surjective. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " (@",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Sort u₁} → α → α", "name": "id", "_type": "typeinfo"},
    "semanticType": null,
    "raw": "id",
    "link": null,
    "docstring":
    "The identity function. `id` takes an implicit argument `α : Sort u`\n(a type in any universe), and an argument `a : α`, and returns `a`.\n\nAlthough this may look like a useless function, one application of the identity\nfunction is to explicitly put a type on an expression. If `e` has type `T`,\nand `T'` is definitionally equal to `T`, then `@id T' e` typechecks, and lean\nknows that this expression has type `T'` rather than `T`. This can make a\ndifference for typeclass inference, since `T` and `T'` may have different\ntypeclass instances on them. `show T' from e` is sugar for an `@id T' e`\nexpression.\n",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Sort u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") := ⟨",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "∀ {α : Sort u₁}, injective id",
     "name": "injective_id",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "injective_id",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ", ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "∀ {α : Sort u₁}, surjective id",
     "name": "surjective_id",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "surjective_id",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "⟩\n\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "end",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " Function\n\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "namespace",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " Function\n\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "variable",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " {",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "Type (u₁ + 1)", "name": "Type u₁", "_type": "typeinfo"},
    "semanticType": null,
    "raw": "Type u₁",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "} {",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "Type (u₂ + 1)", "name": "Type u₂", "_type": "typeinfo"},
    "semanticType": null,
    "raw": "Type u₂",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "} {",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₃", "name": "φ", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "φ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "Type (u₃ + 1)", "name": "Type u₃", "_type": "typeinfo"},
    "semanticType": null,
    "raw": "Type u₃",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw":
    "}\n\n/-- Interpret a function on `α × β` as a function with two arguments. -/\n@[inline] ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "def",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "(α × β → φ) → α → β → φ", "name": "curry", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "curry",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : (",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " × ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₃", "name": "φ", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "φ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₃", "name": "φ", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "φ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " :=\nλ ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α × β → φ", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α", "name": "a", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "a",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β", "name": "b", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "b",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " => ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α × β → φ", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " (",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α", "name": "a", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "a",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ", ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β", "name": "b", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "b",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw":
    ")\n\n/-- Interpret a function with two arguments as a function on `α × β` -/\n@[inline] ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "def",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "(α → β → φ) → α × β → φ", "name": "uncurry", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "uncurry",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : (",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₃", "name": "φ", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "φ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " × ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₃", "name": "φ", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "φ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " :=\nλ ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β → φ", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α × β", "name": "a", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "a",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " => ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β → φ", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α × β", "name": "a", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "a",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ".",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Type u₁} → {β : Type u₂} → α × β → α",
     "name": "1",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "1",
    "link": null,
    "docstring":
    "The first projection out of a pair. if `p : α × β` then `p.1 : α`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α × β", "name": "a", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "a",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ".",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Type u₁} → {β : Type u₂} → α × β → β",
     "name": "2",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "2",
    "link": null,
    "docstring":
    "The second projection out of a pair. if `p : α × β` then `p.2 : β`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "\n\n@[",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "simp",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "] ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "theorem",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "∀ {α : Type u₁} {β : Type u₂} {φ : Type u₃} (f : α → β → φ), curry (uncurry f) = f",
     "name": "curry_uncurry",
     "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "curry_uncurry",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " (",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β → φ", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₃", "name": "φ", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "φ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "{α : Type u₁} → {β : Type u₂} → {φ : Type u₃} → (α × β → φ) → α → β → φ",
     "name": "curry",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "curry",
    "link": null,
    "docstring":
    "Interpret a function on `α × β` as a function with two arguments. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " (",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "{α : Type u₁} → {β : Type u₂} → {φ : Type u₃} → (α → β → φ) → α × β → φ",
     "name": "uncurry",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "uncurry",
    "link": null,
    "docstring":
    "Interpret a function with two arguments as a function on `α × β` ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β → φ", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") = ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β → φ", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " :=\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "∀ {α : Type (max (max u₁ u₂) u₃)} {a : α}, a = a",
     "name": "rfl",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "rfl",
    "link": null,
    "docstring":
    "`rfl : a = a` is the unique constructor of the equality type. This is the\nsame as `Eq.refl` except that it takes `a` implicitly instead of explicitly.\n\nThis is a more powerful theorem than it may appear at first, because although\nthe statement of the theorem is `a = a`, lean will allow anything that is\ndefinitionally equal to that type. So, for instance, `2 + 2 = 4` is proven in\nlean by `rfl`, because both sides are the same up to definitional equality.\n",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "\n\n@[",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "simp",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "] ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "theorem",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "∀ {α : Type u₁} {β : Type u₂} {φ : Type u₃} (f : α × β → φ), uncurry (curry f) = f",
     "name": "uncurry_curry",
     "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "uncurry_curry",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " (",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α × β → φ", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " × ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₃", "name": "φ", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "φ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "{α : Type u₁} → {β : Type u₂} → {φ : Type u₃} → (α → β → φ) → α × β → φ",
     "name": "uncurry",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "uncurry",
    "link": null,
    "docstring":
    "Interpret a function with two arguments as a function on `α × β` ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " (",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "{α : Type u₁} → {β : Type u₂} → {φ : Type u₃} → (α × β → φ) → α → β → φ",
     "name": "curry",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "curry",
    "link": null,
    "docstring":
    "Interpret a function on `α × β` as a function with two arguments. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α × β → φ", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") = ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α × β → φ", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " :=\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "∀ {α : Type (max u₁ u₂)} {β : α → Type u₃} {f g : (x : α) → β x}, (∀ (x : α), f x = g x) → f = g",
     "name": "funext",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "funext",
    "link": null,
    "docstring":
    "**Function extensionality** is the statement that if two functions take equal values\nevery point, then the functions themselves are equal: `(∀ x, f x = g x) → f = g`.\nIt is called \"extensionality\" because it talks about how to prove two objects are equal\nbased on the properties of the object (compare with set extensionality,\nwhich is `(∀ x, x ∈ s ↔ x ∈ t) → s = t`).\n\nThis is often an axiom in dependent type theory systems, because it cannot be proved\nfrom the core logic alone. However in lean's type theory this follows from the existence\nof quotient types (note the `Quot.sound` in the proof, as well as the `show` line\nwhich makes use of the definitional equality `Quot.lift f h (Quot.mk x) = f x`).\n",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " (λ ⟨",
    "link": null,
    "docstring": null,
    "_type": "token"}],
  "_type": "text"},
 {"messages":
  [{"contents": "Warning: unused variable `a` [linter.unusedVariables]",
    "_type": "message"}],
  "goals": [],
  "contents":
  [{"typeinfo": {"type": "α", "name": "a", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "a",
    "link": null,
    "docstring": null,
    "_type": "token"}],
  "_type": "sentence"},
 {"contents":
  [{"typeinfo": null,
    "semanticType": null,
    "raw": ", ",
    "link": null,
    "docstring": null,
    "_type": "token"}],
  "_type": "text"},
 {"messages":
  [{"contents": "Warning: unused variable `b` [linter.unusedVariables]",
    "_type": "message"}],
  "goals": [],
  "contents":
  [{"typeinfo": {"type": "β", "name": "b", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "b",
    "link": null,
    "docstring": null,
    "_type": "token"}],
  "_type": "sentence"},
 {"contents":
  [{"typeinfo": null,
    "semanticType": null,
    "raw": "⟩ => ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "∀ {α : Type u₃} {a : α}, a = a",
     "name": "rfl",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "rfl",
    "link": null,
    "docstring":
    "`rfl : a = a` is the unique constructor of the equality type. This is the\nsame as `Eq.refl` except that it takes `a` implicitly instead of explicitly.\n\nThis is a more powerful theorem than it may appear at first, because although\nthe statement of the theorem is `a = a`, lean will allow anything that is\ndefinitionally equal to that type. So, for instance, `2 + 2 = 4` is proven in\nlean by `rfl`, because both sides are the same up to definitional equality.\n",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ")\n\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "protected",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "theorem",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "∀ {α : Type u₁} {β : Type u₂} {g : β → α} {f : α → β}, left_inverse g f → g ∘ f = id",
     "name": "left_inverse.id",
     "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "left_inverse.id",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " {",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "} {",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "} (",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "left_inverse g f", "name": "h", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "h",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Type u₁} → {β : Type u₂} → (β → α) → (α → β) → Prop",
     "name": "left_inverse",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "left_inverse",
    "link": null,
    "docstring":
    "`left_inverse g f` means that g is a left inverse to f. That is, `g ∘ f = id`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ∘ ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " = ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Type u₁} → α → α", "name": "id", "_type": "typeinfo"},
    "semanticType": null,
    "raw": "id",
    "link": null,
    "docstring":
    "The identity function. `id` takes an implicit argument `α : Sort u`\n(a type in any universe), and an argument `a : α`, and returns `a`.\n\nAlthough this may look like a useless function, one application of the identity\nfunction is to explicitly put a type on an expression. If `e` has type `T`,\nand `T'` is definitionally equal to `T`, then `@id T' e` typechecks, and lean\nknows that this expression has type `T'` rather than `T`. This can make a\ndifference for typeclass inference, since `T` and `T'` may have different\ntypeclass instances on them. `show T' from e` is sugar for an `@id T' e`\nexpression.\n",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " :=\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "∀ {α : Type u₁} {β : α → Type u₁} {f g : (x : α) → β x}, (∀ (x : α), f x = g x) → f = g",
     "name": "funext",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "funext",
    "link": null,
    "docstring":
    "**Function extensionality** is the statement that if two functions take equal values\nevery point, then the functions themselves are equal: `(∀ x, f x = g x) → f = g`.\nIt is called \"extensionality\" because it talks about how to prove two objects are equal\nbased on the properties of the object (compare with set extensionality,\nwhich is `(∀ x, x ∈ s ↔ x ∈ t) → s = t`).\n\nThis is often an axiom in dependent type theory systems, because it cannot be proved\nfrom the core logic alone. However in lean's type theory this follows from the existence\nof quotient types (note the `Quot.sound` in the proof, as well as the `show` line\nwhich makes use of the definitional equality `Quot.lift f h (Quot.mk x) = f x`).\n",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "left_inverse g f", "name": "h", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "h",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "\n\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "protected",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "theorem",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "∀ {α : Type u₁} {β : Type u₂} {g : β → α} {f : α → β}, right_inverse g f → f ∘ g = id",
     "name": "right_inverse.id",
     "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "right_inverse.id",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " {",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "} {",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₁", "name": "α", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "α",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " → ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "Type u₂", "name": "β", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "β",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "} (",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "right_inverse g f", "name": "h", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "h",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Type u₁} → {β : Type u₂} → (β → α) → (α → β) → Prop",
     "name": "right_inverse",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "right_inverse",
    "link": null,
    "docstring":
    "`right_inverse g f` means that g is a right inverse to f. That is, `f ∘ g = id`. ",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": ") : ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "α → β", "name": "f", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "f",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ∘ ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "β → α", "name": "g", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "g",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " = ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type": "{α : Type u₂} → α → α", "name": "id", "_type": "typeinfo"},
    "semanticType": null,
    "raw": "id",
    "link": null,
    "docstring":
    "The identity function. `id` takes an implicit argument `α : Sort u`\n(a type in any universe), and an argument `a : α`, and returns `a`.\n\nAlthough this may look like a useless function, one application of the identity\nfunction is to explicitly put a type on an expression. If `e` has type `T`,\nand `T'` is definitionally equal to `T`, then `@id T' e` typechecks, and lean\nknows that this expression has type `T'` rather than `T`. This can make a\ndifference for typeclass inference, since `T` and `T'` may have different\ntypeclass instances on them. `show T' from e` is sugar for an `@id T' e`\nexpression.\n",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " :=\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo":
    {"type":
     "∀ {α : Type u₂} {β : α → Type u₂} {f g : (x : α) → β x}, (∀ (x : α), f x = g x) → f = g",
     "name": "funext",
     "_type": "typeinfo"},
    "semanticType": null,
    "raw": "funext",
    "link": null,
    "docstring":
    "**Function extensionality** is the statement that if two functions take equal values\nevery point, then the functions themselves are equal: `(∀ x, f x = g x) → f = g`.\nIt is called \"extensionality\" because it talks about how to prove two objects are equal\nbased on the properties of the object (compare with set extensionality,\nwhich is `(∀ x, x ∈ s ↔ x ∈ t) → s = t`).\n\nThis is often an axiom in dependent type theory systems, because it cannot be proved\nfrom the core logic alone. However in lean's type theory this follows from the existence\nof quotient types (note the `Quot.sound` in the proof, as well as the `show` line\nwhich makes use of the definitional equality `Quot.lift f h (Quot.mk x) = f x`).\n",
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " ",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": {"type": "right_inverse g f", "name": "h", "_type": "typeinfo"},
    "semanticType": "Name.Variable",
    "raw": "h",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": "\n\n",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": "Keyword",
    "raw": "end",
    "link": null,
    "docstring": null,
    "_type": "token"},
   {"typeinfo": null,
    "semanticType": null,
    "raw": " Function\n",
    "link": null,
    "docstring": null,
    "_type": "token"}],
  "_type": "text"}]